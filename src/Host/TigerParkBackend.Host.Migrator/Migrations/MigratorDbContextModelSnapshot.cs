// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TigerParkBackend.Host.Migrator.DbContexts;

#nullable disable

namespace TigerParkBackend.Host.Migrator.Migrations
{
    [DbContext(typeof(MigratorDbContext))]
    partial class MigratorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TigerParkBackend.Domain.BonusTransaction.BonusTransaction", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("BonusTransaction");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.ClientStatus.ClientStatus", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.CompletedOrder.CompletedOrder", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Percent")
                        .HasColumnType("numeric");

                    b.Property<string>("Pickup")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("CompletedOrder");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.Order.Order", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ClientStatus")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Comment")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Pickup")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("PorterCount")
                        .HasColumnType("integer");

                    b.Property<string>("Track")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid?>("VehicleId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.Partner.Partner", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Bonuses")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("PayoutRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.PayoutRequest.PayoutRequest", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PayoutAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId")
                        .IsUnique();

                    b.ToTable("PayoutRequest");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.Vehicle.Vehicle", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImageId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.VehicleCategory.VehicleCategory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleCategory");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.VehicleImage.VehicleImage", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("VehicleImage");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.BonusTransaction.BonusTransaction", b =>
                {
                    b.HasOne("TigerParkBackend.Domain.Partner.Partner", "Partner")
                        .WithMany("BonusTransactions")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.CompletedOrder.CompletedOrder", b =>
                {
                    b.HasOne("TigerParkBackend.Domain.Partner.Partner", "Partner")
                        .WithMany("CompletedOrders")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.Order.Order", b =>
                {
                    b.HasOne("TigerParkBackend.Domain.Partner.Partner", "Partner")
                        .WithMany("Orders")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TigerParkBackend.Domain.Vehicle.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("TigerParkBackend.Domain.Order.Order", "VehicleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.PayoutRequest.PayoutRequest", b =>
                {
                    b.HasOne("TigerParkBackend.Domain.Partner.Partner", "Partner")
                        .WithOne("PayoutRequest")
                        .HasForeignKey("TigerParkBackend.Domain.PayoutRequest.PayoutRequest", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.Vehicle.Vehicle", b =>
                {
                    b.HasOne("TigerParkBackend.Domain.VehicleCategory.VehicleCategory", "Category")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TigerParkBackend.Domain.VehicleImage.VehicleImage", "Image")
                        .WithOne()
                        .HasForeignKey("TigerParkBackend.Domain.Vehicle.Vehicle", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.Partner.Partner", b =>
                {
                    b.Navigation("BonusTransactions");

                    b.Navigation("CompletedOrders");

                    b.Navigation("Orders");

                    b.Navigation("PayoutRequest");
                });

            modelBuilder.Entity("TigerParkBackend.Domain.VehicleCategory.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
